      use AI::NeuralNet::SOM;

               # Create a new self-organizing map.
               $som = AI::NeuralNet::SOM->new();

               # Create a data set to initialize and train.

@data = (
5.1,3.5,1.4,0.2,
4.9,3.0,1.4,0.2,
4.7,3.2,1.3,0.2,
4.6,3.1,1.5,0.2,
5.0,3.6,1.4,0.2,
5.4,3.9,1.7,0.4,
4.6,3.4,1.4,0.3,
5.0,3.4,1.5,0.2,
4.4,2.9,1.4,0.2,
4.9,3.1,1.5,0.1,
5.4,3.7,1.5,0.2,
4.8,3.4,1.6,0.2,
4.8,3.0,1.4,0.1,
4.3,3.0,1.1,0.1,
5.8,4.0,1.2,0.2,
5.7,4.4,1.5,0.4,
5.4,3.9,1.3,0.4,
5.1,3.5,1.4,0.3,
5.7,3.8,1.7,0.3,
5.1,3.8,1.5,0.3,
5.4,3.4,1.7,0.2,
5.1,3.7,1.5,0.4,
4.6,3.6,1.0,0.2,
5.1,3.3,1.7,0.5,
4.8,3.4,1.9,0.2,
5.0,3.0,1.6,0.2,
5.0,3.4,1.6,0.4,
5.2,3.5,1.5,0.2,
5.2,3.4,1.4,0.2,
4.7,3.2,1.6,0.2,
4.8,3.1,1.6,0.2,
5.4,3.4,1.5,0.4,
5.2,4.1,1.5,0.1,
5.5,4.2,1.4,0.2,
4.9,3.1,1.5,0.1,
5.0,3.2,1.2,0.2,
5.5,3.5,1.3,0.2,
4.9,3.1,1.5,0.1,
4.4,3.0,1.3,0.2,
5.1,3.4,1.5,0.2,
5.0,3.5,1.3,0.3,
4.5,2.3,1.3,0.3,
4.4,3.2,1.3,0.2,
5.0,3.5,1.6,0.6,
5.1,3.8,1.9,0.4,
4.8,3.0,1.4,0.3,
5.1,3.8,1.6,0.2,
4.6,3.2,1.4,0.2,
5.3,3.7,1.5,0.2,
5.0,3.3,1.4,0.2,
7.0,3.2,4.7,1.4,
6.4,3.2,4.5,1.5,
6.9,3.1,4.9,1.5,
5.5,2.3,4.0,1.3,
6.5,2.8,4.6,1.5,
5.7,2.8,4.5,1.3,
6.3,3.3,4.7,1.6,
4.9,2.4,3.3,1.0,
6.6,2.9,4.6,1.3,
5.2,2.7,3.9,1.4,
5.0,2.0,3.5,1.0,
5.9,3.0,4.2,1.5,
6.0,2.2,4.0,1.0,
6.1,2.9,4.7,1.4,
5.6,2.9,3.6,1.3,
6.7,3.1,4.4,1.4,
5.6,3.0,4.5,1.5,
5.8,2.7,4.1,1.0,
6.2,2.2,4.5,1.5,
5.6,2.5,3.9,1.1,
5.9,3.2,4.8,1.8,
6.1,2.8,4.0,1.3,
6.3,2.5,4.9,1.5,
6.1,2.8,4.7,1.2,
6.4,2.9,4.3,1.3,
6.6,3.0,4.4,1.4,
6.8,2.8,4.8,1.4,
6.7,3.0,5.0,1.7,
6.0,2.9,4.5,1.5,
5.7,2.6,3.5,1.0,
5.5,2.4,3.8,1.1,
5.5,2.4,3.7,1.0,
5.8,2.7,3.9,1.2,
6.0,2.7,5.1,1.6,
5.4,3.0,4.5,1.5,
6.0,3.4,4.5,1.6,
6.7,3.1,4.7,1.5,
6.3,2.3,4.4,1.3,
5.6,3.0,4.1,1.3,
5.5,2.5,4.0,1.3,
5.5,2.6,4.4,1.2,
6.1,3.0,4.6,1.4,
5.8,2.6,4.0,1.2,
5.0,2.3,3.3,1.0,
5.6,2.7,4.2,1.3,
5.7,3.0,4.2,1.2,
5.7,2.9,4.2,1.3,
6.2,2.9,4.3,1.3,
5.1,2.5,3.0,1.1,
5.7,2.8,4.1,1.3,
6.3,3.3,6.0,2.5,
5.8,2.7,5.1,1.9,
7.1,3.0,5.9,2.1,
6.3,2.9,5.6,1.8,
6.5,3.0,5.8,2.2,
7.6,3.0,6.6,2.1,
4.9,2.5,4.5,1.7,
7.3,2.9,6.3,1.8,
6.7,2.5,5.8,1.8,
7.2,3.6,6.1,2.5,
6.5,3.2,5.1,2.0,
6.4,2.7,5.3,1.9,
6.8,3.0,5.5,2.1,
5.7,2.5,5.0,2.0,
5.8,2.8,5.1,2.4,
6.4,3.2,5.3,2.3,
6.5,3.0,5.5,1.8,
7.7,3.8,6.7,2.2,
7.7,2.6,6.9,2.3,
6.0,2.2,5.0,1.5,
6.9,3.2,5.7,2.3,
5.6,2.8,4.9,2.0,
7.7,2.8,6.7,2.0,
6.3,2.7,4.9,1.8,
6.7,3.3,5.7,2.1,
7.2,3.2,6.0,1.8,
6.2,2.8,4.8,1.8,
6.1,3.0,4.9,1.8,
6.4,2.8,5.6,2.1,
7.2,3.0,5.8,1.6,
7.4,2.8,6.1,1.9,
7.9,3.8,6.4,2.0,
6.4,2.8,5.6,2.2,
6.3,2.8,5.1,1.5,
6.1,2.6,5.6,1.4,
7.7,3.0,6.1,2.3,
6.3,3.4,5.6,2.4,
6.4,3.1,5.5,1.8,
6.0,3.0,4.8,1.8,
6.9,3.1,5.4,2.1,
6.7,3.1,5.6,2.4,
6.9,3.1,5.1,2.3,
5.8,2.7,5.1,1.9,
6.8,3.2,5.9,2.3,
6.7,3.3,5.7,2.5,
6.7,3.0,5.2,2.3,
6.3,2.5,5.0,1.9,
6.5,3.0,5.2,2.0,
6.2,3.4,5.4,2.3,
5.9,3.0,5.1,1.8);

               # Initialize map.
               $som->initialize(3,3,5,'hexa','bubble','linear',0,\@data);

               # Find quantization error before training and print it.
               $qerr = $som->qerror(\@data);
               print "Mean quantization error before trainig= $qerr\n";

               # Train map with the same data set.
               $som->train(500,0.05,3,'linear',\@data);

               # Find quantization error after training and print it.
               $qerr = $som->qerror(\@data);
               print "Mean quantization error after trainig= $qerr\n\n";

               # Create a data set to label map.
               @label_data = (
               23.508335, 21.359016, 3.906102, 4.884908, 404.440765,
               23.823174, 21.731325, 4.295785, 5.244288, 405.100342,
               24.207268, 22.070162, 4.646249, 5.030964, 404.812225,
               24.284208, 22.401424, 4.806539, 5.006081, 404.735596,
               24.401838, 22.588514, 4.957213, 5.011020, 404.176880,
               25.824610, 24.155489, 5.976608, 6.708979, 405.040466,
               26.197090, 24.353720, 6.272694, 6.843574, 405.728119,
               26.347252, 24.720333, 6.518201, 6.950599, 405.758606,
               26.537718, 24.976704, 6.661457, 7.163557, 404.037567,
               27.041384, 25.309855, 6.979992, 7.488787, 404.839081,
               27.193167, 25.601683, 7.173965, 7.920047, 404.749054);

               #Label map with "fault" patterns.
               $patterns_count = scalar(@label_data) / $som->i_dim;
               for $i (0..$patterns_count-1){
                       @pattern = splice(@label_data, 0, $som->i_dim);
                       ($x, $y) = $som->winner(\@pattern);
                       $som->set_label($x, $y, "fault");
               }

               # Create a data set to test map.
               @test_data = (
               23.508335, 21.359016, 3.906102, 4.884908, X,
               23.823174, 21.731325, 4.295785, 5.244288, 405.100342,
               24.207268, 22.070162, 4.646249, 5.030964, 404.812225,
               13.575570, 12.656892, -1.424328, -2.302774, 404.921600,
               24.284208, 22.401424, 4.806539, 5.006081, 404.735596,
               24.401838, 22.588514, 4.957213, 5.011020, 404.176880,
               13.844373, 12.610620, -1.435429, -1.964423, 404.978180,
               24.628309, 23.015909, 5.075150, 5.560286, 403.773132,
               13.996934, 12.669785, -1.384147, -1.830788, 405.187378,
               25.551638, 23.864803, 5.774306, 6.208019, 403.946777,
               26.347252, 24.720333, 6.518201, 6.950599, 405.758606,
               26.537718, 24.976704, 6.661457, 7.163557, 404.037567,
               X, 15.601683, X, X, 404.749054,
               27.041384, 25.309855, 6.979992, 7.488787, 404.839081);

               #Test map and print results.
               $patterns_count = scalar(@test_data) / $som->i_dim;
               for $i (0..$patterns_count-1){
                       @pattern = splice(@test_data, 0, $som->i_dim);
                       ($x, $y) = $som->winner(\@pattern);
                       $label=$som->label($x, $y);
                       if (defined($label)) {
                               print "@pattern - $label\n";
                       }
                       else {
                               print "@pattern\n";
                       }
               }
